"""
LAMMPS EEX I/O
"""

import pandas as pd
import math
import numpy as np
import eex

from . import lammps_metadata as lmd

import logging
logger = logging.getLogger(__name__)


def write_lammps_file(dl, data, filename, blocksize=110):

    term_table = lmd.build_term_table("real")

    with open(filename, 'w') as data_file:

        data_file.write("# LAMMPS data file generated by MolSSI EEX\n\n")

        sizes = {}
        sizes["atoms"] = dl.get_atom_count()
        sizes["bonds"] = dl.get_term_count(2, "total")
        sizes["angles"] = dl.get_term_count(3, "total")
        sizes["dihedrals"] = dl.get_term_count(4, "total") # Not qutie right once we do impropers
        sizes["impropers"] = 0
        sizes["atom types"] = len(dl.get_atom_uids("mass"))

        # All the UID's minus the "total" columns
        sizes["bond types"] = len(dl.get_term_count(2)) - 1
        sizes["angle types"] = len(dl.get_term_count(2)) - 1
        sizes["dihedral types"] = len(dl.get_term_count(2)) - 1
        sizes["improper types"] = 0
        #  4 atoms
        #  3 bonds
        #  2 angles
        #  1 dihedrals
        #  0 impropers
        #  2 atom types
        #  2 bond types
        #  1 angle types
        #  1 dihedral types
        #  0 improper types

        # Write header information
        for k in lmd.size_keys:
            data_file.write(" %d %s\n" % (sizes[k], k))
            # data_file.write(' '.join([str(data["sizes"][k]), k, '\n']))

        # Write box information
        box_size = dl.get_box_size()
        for coord in ["x", "y", "z"]:
            data_file.write("% 8.6f% 8.6f %slo %shi\n" % (box_size[coord][0], box_size[coord][1], coord, coord))
        data_file.write('\n')
        # for coord in box_size:
        #     data_file.write(' '.join([str(box_size[coord][0]), str(box_size[coord][1]), ''.join([coord,"lo"]), ''.join([coord,"hi"]), "\n"]))

        # data_file.write('\n')
        # data_file.write("Pair Coeffs\n\n")
        # data_file.write("NYI\n")

        param_fmt = "%10.8f"
        for param_order, param_type in zip([2, 3, 4], ["bonds", "angles", "dihedrals"]):
            param_uids = dl.list_parameter_uids(param_type)

            if len(param_uids) == 0: continue

            data_file.write(("%s Coeffs\n\n" % param_type).title())
            for uid in param_uids:
                param_coeffs = dl.get_parameter(param_type, uid)
                term_data = term_table[param_order][param_coeffs[0]]
                param_coeffs = dl.get_parameter(param_type, uid, utype=term_data["utype"])

                # Order the data like lammps wants it
                parameters = [param_coeffs[1][k] for k in term_data["parameters"]]

                data_file.write("%2d " % uid)
                data_file.write(" ".join(param_fmt % f for f in parameters))
                data_file.write("\n")
                # value_list = list(bond_coeffs[1].values())
                # value_string = ' '.join(str(x) for x in value_list)
                # data_file.write(' '.join([str(uid), value_string, '\n']))
            data_file.write("\n")

        raise Exception()

        atoms = dl.get_atoms(["mass", "charge", "xyz"], by_value=True)
        if atoms.shape[0] > 0:
            data_file.write('\n')
            data_file.write("Masses\n\n")
            #atoms["mass"].to_string(data_file, header=None)
            for idx, mass in enumerate(np.unique(atoms["mass"])):
                data_file.write(' '.join([str(idx + 1), str(mass), '\n']))

            data_file.write('\n')
            data_file.write("Atoms\n\n")
            atoms[["charge", "X", "Y", "Z"]].to_string(data_file, header=None, index_names=False, index=True)
            data_file.write('\n')

        if len(bond_uids) > 0:
            data_file.write('\n')
            data_file.write("Bonds\n\n")
            bonds = dl.get_bonds()[["term_index", "atom1", "atom2"]]
            bonds.index = pd.RangeIndex(start=1, stop=bonds.shape[0] + 1)
            bonds.to_string(data_file, header=None)

        if len(angle_uids) > 0:
            data_file.write('\n')
            data_file.write("\nAngles\n\n")
            angles = dl.get_angles()[["term_index", "atom1", "atom2", "atom3"]]
            angles.index = pd.RangeIndex(start=1, stop=angles.shape[0] + 1)
            angles.to_string(data_file, header=None)

        if len(dihedral_uids) > 0:
            data_file.write('\n')
            data_file.write("\nDihedrals\n\n")
            dihedrals = dl.get_dihedrals()[["term_index", "atom1", "atom2", "atom3", "atom4"]]
            dihedrals.index = pd.RangeIndex(start=1, stop=dihedrals.shape[0] + 1)
            dihedrals.to_string(data_file, header=None)
